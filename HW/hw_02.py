# Задача 1. Монетки
'''
На столе лежат n монеток. Некоторые из монеток лежат вверх решкой, а некоторые – гербом. 
Ваша задача - определить минимальное количество монеток, которые нужно перевернуть, 
чтобы все монетки лежали одной и той же стороной вверх.
Входные данные:
На вход программе подается список coins, где coins[i] равно 0, если i-я монетка лежит гербом вверх, и равно 1, если i-я монетка лежит решкой вверх. 
Размер списка не превышает 1000 элементов.
Выходные данные:
Программа должна вывести одно целое число - минимальное количество монеток, которые нужно перевернуть.

На входе: coins = [0, 1, 0, 1, 1, 0]
На выходе: 3
'''

coins = [0, 1, 0, 1, 1, 0]

# Инициализация переменных для подсчета гербов и решек
count_heads = 0
count_tails = 0

# Перебор элементов списка монеток
index = 0
while index < len(coins):
    if coins[index] == 0:
        count_heads += 1
    elif coins[index] == 1:
        count_tails += 1
    index += 1

# Вывод минимального количества переворотов
result = min(count_heads, count_tails)
print(result)

# ------------------------------------
'''
# Задача 2. Помогите Кате отгадать задуманные Петей числа

Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике.
Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать. 
Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. 
Помогите Кате отгадать задуманные Петей числа.
Примечание: в результате вы должны вывести все возможные пары чисел X и Y через пробел, такие что X <= Y.
На входе: s = 12  p = 27
На выходе: 3 9
'''
s = 12
p = 27

# Список для хранения пар чисел X и Y
result = []
# Внешний цикл для перебора всех возможных значений X
for x in range(1, s+1):
    # Внутренний цикл для перебора всех возможных значений Y
    for y in range(x, s - x + 1):
        # Проверка условий суммы и произведения
        if x + y == s and x * y == p:
            result.append((x, y))

# Вывод результатов
for pair in result:
    print(*pair)

# -----------------------

'''    
# Задача 3. Целые степени двойки
Требуется вывести все целые степени двойки (т.е. числа вида 2k), не превосходящие числаN.

Ввод: n=16
Вывод:
1
2
4
8
16
'''

n=16
power = 0

while 2 ** power <= n:
    print(2 ** power)
    power += 1